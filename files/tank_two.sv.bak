module tank_one (input Reset, frame_clk
						input [7:0] port_0, port_1, port_2, port_3, port_4, port_5,
						input [9:0] tank_x, tank_y, 
						input [6:0] tank_angle);
						

		logic [9:0] x, y, inc_x, inc_y;
		logic [6:0] angle;
		logic [8:0] motion_x, motion_y;
		logic [1:0] motion;
		logic [6:0] rotation;
		logic [8:0] sin, cos;
		trig trig_0(.angle(angle), .sin(sin), .cos(cos));

		logic [5:0] up, down, right, left;
		
		always_comb 
		begin
		
			case (port_5)
				8'h52 : begin
					up[5] = 1;
					down[5] = 0;
					right[5] = 0;
					left[5] = 0;
					end
				8'h50 : begin
					up[5] = 0;
					down[5] = 0;
					right[5] = 0;
					left[5] = 1;
					end
				8'h51 : begin
					up[5] = 0;
					down[5] = 1;
					right[5] = 0;
					left[5] = 0;
					end
				8'h4f : begin
					up[5] = 0;
					down[5] = 0;
					right[5] = 1;
					left[5] = 0;
					end
				default : begin
					up[5] = 0;
					down[5] = 0;
					right[5] = 0;
					left[5] = 0;
				end
			endcase
			
			case (port_4)
				8'h52 : begin
					up[4] = 1;
					down[4] = 0;
					right[4] = 0;
					left[4] = 0;
					end
				8'h50 : begin
					up[4] = 0;
					down[4] = 0;
					right[4] = 0;
					left[4] = 1;
					end
				8'h51 : begin
					up[4] = 0;
					down[4] = 1;
					right[4] = 0;
					left[4] = 0;
					end
				8'h4f : begin
					up[4] = 0;
					down[4] = 0;
					right[4] = 1;
					left[4] = 0;
					end
				default : begin
					up[4] = 0;
					down[4] = 0;
					right[4] = 0;
					left[4] = 0;
				end
			endcase
			
			case (port_4)
				8'h52 : begin
					up[4] = 1;
					down[4] = 0;
					right[4] = 0;
					left[4] = 0;
					end
				8'h50 : begin
					up[4] = 0;
					down[4] = 0;
					right[4] = 0;
					left[4] = 1;
					end
				8'h51 : begin
					up[4] = 0;
					down[4] = 1;
					right[4] = 0;
					left[4] = 0;
					end
				8'h4f : begin
					up[4] = 0;
					down[4] = 0;
					right[4] = 1;
					left[4] = 0;
					end
				default : begin
					up[4] = 0;
					down[4] = 0;
					right[4] = 0;
					left[4] = 0;
				end
			endcase
					
			case (port_3)
				8'h52 : begin
					up[3] = 1;
					down[3] = 0;
					right[3] = 0;
					left[3] = 0;
					end
				8'h50 : begin
					up[3] = 0;
					down[3] = 0;
					right[3] = 0;
					left[3] = 1;
					end
				8'h51 : begin
					up[3] = 0;
					down[3] = 1;
					right[3] = 0;
					left[3] = 0;
					end
				8'h4f : begin
					up[3] = 0;
					down[3] = 0;
					right[3] = 1;
					left[3] = 0;
					end
				default : begin
					up[3] = 0;
					down[3] = 0;
					right[3] = 0;
					left[3] = 0;
				end
			endcase
			
			case (port_2)
				8'h52 : begin
					up[2] = 1;
					down[2] = 0;
					right[2] = 0;
					left[2] = 0;
					end
				8'h50 : begin
					up[2] = 0;
					down[2] = 0;
					right[2] = 0;
					left[2] = 1;
					end
				8'h51 : begin
					up[2] = 0;
					down[2] = 1;
					right[2] = 0;
					left[2] = 0;
					end
				8'h4f : begin
					up[2] = 0;
					down[2] = 0;
					right[2] = 1;
					left[2] = 0;
					end
				default : begin
					up[2] = 0;
					down[2] = 0;
					right[2] = 0;
					left[2] = 0;
				end
			endcase
			
			case (port_1)
				8'h52 : begin
					up[1] = 1;
					down[1] = 0;
					right[1] = 0;
					left[1] = 0;
					end
				8'h50 : begin
					up[1] = 0;
					down[1] = 0;
					right[1] = 0;
					left[1] = 1;
					end
				8'h51 : begin
					up[1] = 0;
					down[1] = 1;
					right[1] = 0;
					left[1] = 0;
					end
				8'h4f : begin
					up[1] = 0;
					down[1] = 0;
					right[1] = 1;
					left[1] = 0;
					end
				default : begin
					up[1] = 0;
					down[1] = 0;
					right[1] = 0;
					left[1] = 0;
				end
			endcase
			
			
			case (port_0)
				8'h52 : begin
					up[0] = 1;
					down[0] = 0;
					right[0] = 0;
					left[0] = 0;
					end
				8'h50 : begin
					up[0] = 0;
					down[0] = 0;
					right[0] = 0;
					left[0] = 1;
					end
				8'h51 : begin
					up[0] = 0;
					down[0] = 1;
					right[0] = 0;
					left[0] = 0;
					end
				8'h4f : begin
					up[0] = 0;
					down[0] = 0;
					right[0] = 1;
					left[0] = 0;
					end
				default : begin
					up[0] = 0;
					down[0] = 0;
					right[0] = 0;
					left[0] = 0;
				end
			endcase
			
		end
		
		
		always_ff @ (posedge Reset or posedge frame_clk ) begin
		
			if(Reset) begin
				x <= 100;
				y <= 100;
				angle <= 0;
			end else begin
				
				if (~(up==0) && down==0)
					motion <= 1;
				else if (up==0 && ~(down==0))
					motion <= -1;
				else
					motion <= 0;
					
				if (right==0 && ~(left_key==0))
					rotation <= -1;
				else if (~(right==0) && left_key==0)
					rotation <= 1;
				else
					rotation <= 0;
					
				if(rotation == -1 && angle == 0)
					angle <= 356;
				else if(rotation == 1 && angle == 356)
					angle <= 0;
				else 
					angle <= angle + rotation;
					
				if (motion != 0) begin
					if ((motion[1]^cos[8] && x==0) || (~(motion[1]^cos[8]) && x==639))
						motion_x <= 0;
					else
						motion_x <= {cos[8]^motion[1], 3*cos[7:0]};
					
					if ((motion[1]^sin[8] && y==479) || (~(motion[1]^sin[8]) && x==0))
						motion_y <= 0;
					else
						motion_y <= {sin[8]^motion[1], 3*sin[7:0]};
				end else begin
					motion_y <=0;
					motion_x <= 0;
				end
				
				
				x <= x + 9'(signed'(({motion_x[8], motion_x[7:4] + {3'h0,motion_x[3]}}))); //
				y <= y + 9'(signed'(({motion_y[8], motion_y[7:4] + {3'h0,motion_y[3]}})));
				
			end
					
				
		assign tank_x = x;
		assign tank_y = y;
		assign tank_angle = angle;
		
endmodule			
				
					